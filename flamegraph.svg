<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="277.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="277.00"> </text><svg id="frames" x="10" width="1180" total_samples="364"><g><title>libdyld.dylib`0x7ff8140cc07b (1 samples, 0.27%)</title><rect x="0.0000%" y="213" width="0.2747%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`__exit (1 samples, 0.27%)</title><rect x="0.0000%" y="197" width="0.2747%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff813eeb1f8 (2 samples, 0.55%)</title><rect x="0.2747%" y="149" width="0.5495%" height="15" fill="rgb(221,193,54)" fg:x="1" fg:w="2"/><text x="0.5247%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff813eeb204 (1 samples, 0.27%)</title><rect x="0.8242%" y="149" width="0.2747%" height="15" fill="rgb(248,212,6)" fg:x="3" fg:w="1"/><text x="1.0742%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff813eeb211 (1 samples, 0.27%)</title><rect x="1.0989%" y="149" width="0.2747%" height="15" fill="rgb(208,68,35)" fg:x="4" fg:w="1"/><text x="1.3489%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff813eebc7d (1 samples, 0.27%)</title><rect x="1.3736%" y="149" width="0.2747%" height="15" fill="rgb(232,128,0)" fg:x="5" fg:w="1"/><text x="1.6236%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff813eebc8b (1 samples, 0.27%)</title><rect x="1.6484%" y="149" width="0.2747%" height="15" fill="rgb(207,160,47)" fg:x="6" fg:w="1"/><text x="1.8984%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1 samples, 0.27%)</title><rect x="1.9231%" y="149" width="0.2747%" height="15" fill="rgb(228,23,34)" fg:x="7" fg:w="1"/><text x="2.1731%" y="159.50"></text></g><g><title>tmx_to_text`__rdl_alloc (1 samples, 0.27%)</title><rect x="2.1978%" y="149" width="0.2747%" height="15" fill="rgb(218,30,26)" fg:x="8" fg:w="1"/><text x="2.4478%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff813ebea2a (1 samples, 0.27%)</title><rect x="5.7692%" y="117" width="0.2747%" height="15" fill="rgb(220,122,19)" fg:x="21" fg:w="1"/><text x="6.0192%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff813ebd962 (2 samples, 0.55%)</title><rect x="5.7692%" y="133" width="0.5495%" height="15" fill="rgb(250,228,42)" fg:x="21" fg:w="2"/><text x="6.0192%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff813ebeb43 (1 samples, 0.27%)</title><rect x="6.0440%" y="117" width="0.2747%" height="15" fill="rgb(240,193,28)" fg:x="22" fg:w="1"/><text x="6.2940%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff813ebfabf (1 samples, 0.27%)</title><rect x="6.0440%" y="101" width="0.2747%" height="15" fill="rgb(216,20,37)" fg:x="22" fg:w="1"/><text x="6.2940%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff813ec1364 (1 samples, 0.27%)</title><rect x="6.3187%" y="133" width="0.2747%" height="15" fill="rgb(206,188,39)" fg:x="23" fg:w="1"/><text x="6.5687%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff813ec1497 (1 samples, 0.27%)</title><rect x="6.5934%" y="133" width="0.2747%" height="15" fill="rgb(217,207,13)" fg:x="24" fg:w="1"/><text x="6.8434%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff813ec16c0 (1 samples, 0.27%)</title><rect x="6.8681%" y="117" width="0.2747%" height="15" fill="rgb(231,73,38)" fg:x="25" fg:w="1"/><text x="7.1181%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff813ec229b (1 samples, 0.27%)</title><rect x="7.1429%" y="101" width="0.2747%" height="15" fill="rgb(225,20,46)" fg:x="26" fg:w="1"/><text x="7.3929%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff813ec186c (2 samples, 0.55%)</title><rect x="7.1429%" y="117" width="0.5495%" height="15" fill="rgb(210,31,41)" fg:x="26" fg:w="2"/><text x="7.3929%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff813ec237d (1 samples, 0.27%)</title><rect x="7.4176%" y="101" width="0.2747%" height="15" fill="rgb(221,200,47)" fg:x="27" fg:w="1"/><text x="7.6676%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff813ec1925 (1 samples, 0.27%)</title><rect x="7.6923%" y="117" width="0.2747%" height="15" fill="rgb(226,26,5)" fg:x="28" fg:w="1"/><text x="7.9423%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff813ec1a27 (1 samples, 0.27%)</title><rect x="7.9670%" y="117" width="0.2747%" height="15" fill="rgb(249,33,26)" fg:x="29" fg:w="1"/><text x="8.2170%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff813ec215d (1 samples, 0.27%)</title><rect x="7.9670%" y="101" width="0.2747%" height="15" fill="rgb(235,183,28)" fg:x="29" fg:w="1"/><text x="8.2170%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff813eef64a (1 samples, 0.27%)</title><rect x="8.2418%" y="101" width="0.2747%" height="15" fill="rgb(221,5,38)" fg:x="30" fg:w="1"/><text x="8.4918%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff813ec1b2e (7 samples, 1.92%)</title><rect x="8.2418%" y="117" width="1.9231%" height="15" fill="rgb(247,18,42)" fg:x="30" fg:w="7"/><text x="8.4918%" y="127.50">l..</text></g><g><title>libsystem_malloc.dylib`0x7ff813eef68b (6 samples, 1.65%)</title><rect x="8.5165%" y="101" width="1.6484%" height="15" fill="rgb(241,131,45)" fg:x="31" fg:w="6"/><text x="8.7665%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff813ec6693 (6 samples, 1.65%)</title><rect x="8.5165%" y="85" width="1.6484%" height="15" fill="rgb(249,31,29)" fg:x="31" fg:w="6"/><text x="8.7665%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`madvise (6 samples, 1.65%)</title><rect x="8.5165%" y="69" width="1.6484%" height="15" fill="rgb(225,111,53)" fg:x="31" fg:w="6"/><text x="8.7665%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff813ec14b1 (13 samples, 3.57%)</title><rect x="6.8681%" y="133" width="3.5714%" height="15" fill="rgb(238,160,17)" fg:x="25" fg:w="13"/><text x="7.1181%" y="143.50">libs..</text></g><g><title>libsystem_malloc.dylib`0x7ff813ec1cfa (1 samples, 0.27%)</title><rect x="10.1648%" y="117" width="0.2747%" height="15" fill="rgb(214,148,48)" fg:x="37" fg:w="1"/><text x="10.4148%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff813ec8643 (1 samples, 0.27%)</title><rect x="10.1648%" y="101" width="0.2747%" height="15" fill="rgb(232,36,49)" fg:x="37" fg:w="1"/><text x="10.4148%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`madvise (3 samples, 0.82%)</title><rect x="10.4396%" y="85" width="0.8242%" height="15" fill="rgb(209,103,24)" fg:x="38" fg:w="3"/><text x="10.6896%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff813ec664e (4 samples, 1.10%)</title><rect x="10.4396%" y="133" width="1.0989%" height="15" fill="rgb(229,88,8)" fg:x="38" fg:w="4"/><text x="10.6896%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff813edff10 (4 samples, 1.10%)</title><rect x="10.4396%" y="117" width="1.0989%" height="15" fill="rgb(213,181,19)" fg:x="38" fg:w="4"/><text x="10.6896%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff813ec6693 (4 samples, 1.10%)</title><rect x="10.4396%" y="101" width="1.0989%" height="15" fill="rgb(254,191,54)" fg:x="38" fg:w="4"/><text x="10.6896%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff813ed6c90 (1 samples, 0.27%)</title><rect x="11.2637%" y="85" width="0.2747%" height="15" fill="rgb(241,83,37)" fg:x="41" fg:w="1"/><text x="11.5137%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff813ed2e09 (1 samples, 0.27%)</title><rect x="11.5385%" y="133" width="0.2747%" height="15" fill="rgb(233,36,39)" fg:x="42" fg:w="1"/><text x="11.7885%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff813edeb7d (1 samples, 0.27%)</title><rect x="11.8132%" y="133" width="0.2747%" height="15" fill="rgb(226,3,54)" fg:x="43" fg:w="1"/><text x="12.0632%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff813edebc8 (1 samples, 0.27%)</title><rect x="12.0879%" y="133" width="0.2747%" height="15" fill="rgb(245,192,40)" fg:x="44" fg:w="1"/><text x="12.3379%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff813edebd2 (1 samples, 0.27%)</title><rect x="12.3626%" y="133" width="0.2747%" height="15" fill="rgb(238,167,29)" fg:x="45" fg:w="1"/><text x="12.6126%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff813edebef (2 samples, 0.55%)</title><rect x="12.6374%" y="133" width="0.5495%" height="15" fill="rgb(232,182,51)" fg:x="46" fg:w="2"/><text x="12.8874%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff813edec34 (1 samples, 0.27%)</title><rect x="13.1868%" y="133" width="0.2747%" height="15" fill="rgb(231,60,39)" fg:x="48" fg:w="1"/><text x="13.4368%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff813edec4d (1 samples, 0.27%)</title><rect x="13.4615%" y="133" width="0.2747%" height="15" fill="rgb(208,69,12)" fg:x="49" fg:w="1"/><text x="13.7115%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff813edecbd (1 samples, 0.27%)</title><rect x="13.7363%" y="133" width="0.2747%" height="15" fill="rgb(235,93,37)" fg:x="50" fg:w="1"/><text x="13.9863%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff813edecf5 (1 samples, 0.27%)</title><rect x="14.0110%" y="133" width="0.2747%" height="15" fill="rgb(213,116,39)" fg:x="51" fg:w="1"/><text x="14.2610%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff813eded33 (1 samples, 0.27%)</title><rect x="14.2857%" y="133" width="0.2747%" height="15" fill="rgb(222,207,29)" fg:x="52" fg:w="1"/><text x="14.5357%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff813ebcd8b (1 samples, 0.27%)</title><rect x="14.5604%" y="101" width="0.2747%" height="15" fill="rgb(206,96,30)" fg:x="53" fg:w="1"/><text x="14.8104%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff813ee0460 (2 samples, 0.55%)</title><rect x="14.5604%" y="117" width="0.5495%" height="15" fill="rgb(218,138,4)" fg:x="53" fg:w="2"/><text x="14.8104%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff813ebd1d5 (1 samples, 0.27%)</title><rect x="14.8352%" y="101" width="0.2747%" height="15" fill="rgb(250,191,14)" fg:x="54" fg:w="1"/><text x="15.0852%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff813eded9e (5 samples, 1.37%)</title><rect x="14.5604%" y="133" width="1.3736%" height="15" fill="rgb(239,60,40)" fg:x="53" fg:w="5"/><text x="14.8104%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff813ee04c6 (3 samples, 0.82%)</title><rect x="15.1099%" y="117" width="0.8242%" height="15" fill="rgb(206,27,48)" fg:x="55" fg:w="3"/><text x="15.3599%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff813ededcf (1 samples, 0.27%)</title><rect x="15.9341%" y="133" width="0.2747%" height="15" fill="rgb(225,35,8)" fg:x="58" fg:w="1"/><text x="16.1841%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff813edef22 (1 samples, 0.27%)</title><rect x="16.2088%" y="133" width="0.2747%" height="15" fill="rgb(250,213,24)" fg:x="59" fg:w="1"/><text x="16.4588%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff813edef77 (1 samples, 0.27%)</title><rect x="16.4835%" y="133" width="0.2747%" height="15" fill="rgb(247,123,22)" fg:x="60" fg:w="1"/><text x="16.7335%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff813edef8c (1 samples, 0.27%)</title><rect x="16.7582%" y="133" width="0.2747%" height="15" fill="rgb(231,138,38)" fg:x="61" fg:w="1"/><text x="17.0082%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff813edefc0 (5 samples, 1.37%)</title><rect x="17.0330%" y="133" width="1.3736%" height="15" fill="rgb(231,145,46)" fg:x="62" fg:w="5"/><text x="17.2830%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff813edeff8 (1 samples, 0.27%)</title><rect x="18.4066%" y="133" width="0.2747%" height="15" fill="rgb(251,118,11)" fg:x="67" fg:w="1"/><text x="18.6566%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff813edf08b (1 samples, 0.27%)</title><rect x="18.6813%" y="133" width="0.2747%" height="15" fill="rgb(217,147,25)" fg:x="68" fg:w="1"/><text x="18.9313%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff813edf0c8 (2 samples, 0.55%)</title><rect x="18.9560%" y="133" width="0.5495%" height="15" fill="rgb(247,81,37)" fg:x="69" fg:w="2"/><text x="19.2060%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff813edf0ca (1 samples, 0.27%)</title><rect x="19.5055%" y="133" width="0.2747%" height="15" fill="rgb(209,12,38)" fg:x="71" fg:w="1"/><text x="19.7555%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff813edf0e4 (1 samples, 0.27%)</title><rect x="19.7802%" y="133" width="0.2747%" height="15" fill="rgb(227,1,9)" fg:x="72" fg:w="1"/><text x="20.0302%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff813edf121 (2 samples, 0.55%)</title><rect x="20.0549%" y="133" width="0.5495%" height="15" fill="rgb(248,47,43)" fg:x="73" fg:w="2"/><text x="20.3049%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff813edf16e (1 samples, 0.27%)</title><rect x="20.6044%" y="133" width="0.2747%" height="15" fill="rgb(221,10,30)" fg:x="75" fg:w="1"/><text x="20.8544%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff813edf170 (1 samples, 0.27%)</title><rect x="20.8791%" y="133" width="0.2747%" height="15" fill="rgb(210,229,1)" fg:x="76" fg:w="1"/><text x="21.1291%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp$VARIANT$Base (1 samples, 0.27%)</title><rect x="21.1538%" y="133" width="0.2747%" height="15" fill="rgb(222,148,37)" fg:x="77" fg:w="1"/><text x="21.4038%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (29 samples, 7.97%)</title><rect x="21.4286%" y="133" width="7.9670%" height="15" fill="rgb(234,67,33)" fg:x="78" fg:w="29"/><text x="21.6786%" y="143.50">libsystem_p..</text></g><g><title>libsystem_malloc.dylib`0x7ff813ebea03 (1 samples, 0.27%)</title><rect x="29.6703%" y="101" width="0.2747%" height="15" fill="rgb(247,98,35)" fg:x="108" fg:w="1"/><text x="29.9203%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff813ebd962 (2 samples, 0.55%)</title><rect x="29.6703%" y="117" width="0.5495%" height="15" fill="rgb(247,138,52)" fg:x="108" fg:w="2"/><text x="29.9203%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff813ebeb43 (1 samples, 0.27%)</title><rect x="29.9451%" y="101" width="0.2747%" height="15" fill="rgb(213,79,30)" fg:x="109" fg:w="1"/><text x="30.1951%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff813ebf7ce (1 samples, 0.27%)</title><rect x="29.9451%" y="85" width="0.2747%" height="15" fill="rgb(246,177,23)" fg:x="109" fg:w="1"/><text x="30.1951%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff813ec1faf (1 samples, 0.27%)</title><rect x="29.9451%" y="69" width="0.2747%" height="15" fill="rgb(230,62,27)" fg:x="109" fg:w="1"/><text x="30.1951%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff813edeb79 (1 samples, 0.27%)</title><rect x="30.2198%" y="117" width="0.2747%" height="15" fill="rgb(216,154,8)" fg:x="110" fg:w="1"/><text x="30.4698%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff813edebc4 (1 samples, 0.27%)</title><rect x="30.4945%" y="117" width="0.2747%" height="15" fill="rgb(244,35,45)" fg:x="111" fg:w="1"/><text x="30.7445%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff813edebd6 (1 samples, 0.27%)</title><rect x="30.7692%" y="117" width="0.2747%" height="15" fill="rgb(251,115,12)" fg:x="112" fg:w="1"/><text x="31.0192%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff813edec09 (1 samples, 0.27%)</title><rect x="31.0440%" y="117" width="0.2747%" height="15" fill="rgb(240,54,50)" fg:x="113" fg:w="1"/><text x="31.2940%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff813eded33 (1 samples, 0.27%)</title><rect x="31.3187%" y="117" width="0.2747%" height="15" fill="rgb(233,84,52)" fg:x="114" fg:w="1"/><text x="31.5687%" y="127.50"></text></g><g><title>tmx_to_text`&lt;alloc::string::String as core::clone::Clone&gt;::clone (10 samples, 2.75%)</title><rect x="29.3956%" y="133" width="2.7473%" height="15" fill="rgb(207,117,47)" fg:x="107" fg:w="10"/><text x="29.6456%" y="143.50">tm..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (2 samples, 0.55%)</title><rect x="31.5934%" y="117" width="0.5495%" height="15" fill="rgb(249,43,39)" fg:x="115" fg:w="2"/><text x="31.8434%" y="127.50"></text></g><g><title>tmx_to_text`&lt;tmx_to_text::Args as clap_builder::derive::CommandFactory&gt;::command (1 samples, 0.27%)</title><rect x="32.1429%" y="133" width="0.2747%" height="15" fill="rgb(209,38,44)" fg:x="117" fg:w="1"/><text x="32.3929%" y="143.50"></text></g><g><title>tmx_to_text`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.27%)</title><rect x="32.1429%" y="117" width="0.2747%" height="15" fill="rgb(236,212,23)" fg:x="117" fg:w="1"/><text x="32.3929%" y="127.50"></text></g><g><title>tmx_to_text`alloc::raw_vec::finish_grow (1 samples, 0.27%)</title><rect x="32.1429%" y="101" width="0.2747%" height="15" fill="rgb(242,79,21)" fg:x="117" fg:w="1"/><text x="32.3929%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff813ebd962 (1 samples, 0.27%)</title><rect x="32.1429%" y="85" width="0.2747%" height="15" fill="rgb(211,96,35)" fg:x="117" fg:w="1"/><text x="32.3929%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff813ebee8c (1 samples, 0.27%)</title><rect x="32.1429%" y="69" width="0.2747%" height="15" fill="rgb(253,215,40)" fg:x="117" fg:w="1"/><text x="32.3929%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff813ed6811 (1 samples, 0.27%)</title><rect x="32.1429%" y="53" width="0.2747%" height="15" fill="rgb(211,81,21)" fg:x="117" fg:w="1"/><text x="32.3929%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`mach_vm_map (1 samples, 0.27%)</title><rect x="32.1429%" y="37" width="0.2747%" height="15" fill="rgb(208,190,38)" fg:x="117" fg:w="1"/><text x="32.3929%" y="47.50"></text></g><g><title>tmx_to_text`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (6 samples, 1.65%)</title><rect x="32.4176%" y="133" width="1.6484%" height="15" fill="rgb(235,213,38)" fg:x="118" fg:w="6"/><text x="32.6676%" y="143.50"></text></g><g><title>tmx_to_text`alloc::raw_vec::finish_grow (6 samples, 1.65%)</title><rect x="32.4176%" y="117" width="1.6484%" height="15" fill="rgb(237,122,38)" fg:x="118" fg:w="6"/><text x="32.6676%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff813eebde2 (6 samples, 1.65%)</title><rect x="32.4176%" y="101" width="1.6484%" height="15" fill="rgb(244,218,35)" fg:x="118" fg:w="6"/><text x="32.6676%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff813eeb71f (6 samples, 1.65%)</title><rect x="32.4176%" y="85" width="1.6484%" height="15" fill="rgb(240,68,47)" fg:x="118" fg:w="6"/><text x="32.6676%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff813ec0b77 (6 samples, 1.65%)</title><rect x="32.4176%" y="69" width="1.6484%" height="15" fill="rgb(210,16,53)" fg:x="118" fg:w="6"/><text x="32.6676%" y="79.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (6 samples, 1.65%)</title><rect x="32.4176%" y="53" width="1.6484%" height="15" fill="rgb(235,124,12)" fg:x="118" fg:w="6"/><text x="32.6676%" y="63.50"></text></g><g><title>tmx_to_text`clap_builder::builder::command::Command::arg_internal (1 samples, 0.27%)</title><rect x="34.0659%" y="133" width="0.2747%" height="15" fill="rgb(224,169,11)" fg:x="124" fg:w="1"/><text x="34.3159%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1 samples, 0.27%)</title><rect x="38.1868%" y="85" width="0.2747%" height="15" fill="rgb(250,166,2)" fg:x="139" fg:w="1"/><text x="38.4368%" y="95.50"></text></g><g><title>tmx_to_text`csv_core::writer::Writer::field (15 samples, 4.12%)</title><rect x="34.8901%" y="117" width="4.1209%" height="15" fill="rgb(242,216,29)" fg:x="127" fg:w="15"/><text x="35.1401%" y="127.50">tmx_..</text></g><g><title>tmx_to_text`csv_core::writer::quote (3 samples, 0.82%)</title><rect x="38.1868%" y="101" width="0.8242%" height="15" fill="rgb(230,116,27)" fg:x="139" fg:w="3"/><text x="38.4368%" y="111.50"></text></g><g><title>tmx_to_text`memchr::arch::x86_64::memchr::memchr_raw::find_avx2 (2 samples, 0.55%)</title><rect x="38.4615%" y="85" width="0.5495%" height="15" fill="rgb(228,99,48)" fg:x="140" fg:w="2"/><text x="38.7115%" y="95.50"></text></g><g><title>tmx_to_text`memchr::arch::x86_64::avx2::memchr::One::find_raw (2 samples, 0.55%)</title><rect x="38.4615%" y="69" width="0.5495%" height="15" fill="rgb(253,11,6)" fg:x="140" fg:w="2"/><text x="38.7115%" y="79.50"></text></g><g><title>tmx_to_text`memchr::arch::x86_64::avx2::memchr::One::find_raw_avx2 (2 samples, 0.55%)</title><rect x="38.4615%" y="53" width="0.5495%" height="15" fill="rgb(247,143,39)" fg:x="140" fg:w="2"/><text x="38.7115%" y="63.50"></text></g><g><title>tmx_to_text`csv::writer::Writer&lt;W&gt;::write_record (49 samples, 13.46%)</title><rect x="34.3407%" y="133" width="13.4615%" height="15" fill="rgb(236,97,10)" fg:x="125" fg:w="49"/><text x="34.5907%" y="143.50">tmx_to_text`csv::wri..</text></g><g><title>tmx_to_text`std::io::Write::write_all (32 samples, 8.79%)</title><rect x="39.0110%" y="117" width="8.7912%" height="15" fill="rgb(233,208,19)" fg:x="142" fg:w="32"/><text x="39.2610%" y="127.50">tmx_to_text`..</text></g><g><title>libsystem_kernel.dylib`write (32 samples, 8.79%)</title><rect x="39.0110%" y="101" width="8.7912%" height="15" fill="rgb(216,164,2)" fg:x="142" fg:w="32"/><text x="39.2610%" y="111.50">libsystem_ke..</text></g><g><title>tmx_to_text`csv::writer::WriterBuilder::from_path (2 samples, 0.55%)</title><rect x="47.8022%" y="133" width="0.5495%" height="15" fill="rgb(220,129,5)" fg:x="174" fg:w="2"/><text x="48.0522%" y="143.50"></text></g><g><title>tmx_to_text`std::fs::OpenOptions::_open (2 samples, 0.55%)</title><rect x="47.8022%" y="117" width="0.5495%" height="15" fill="rgb(242,17,10)" fg:x="174" fg:w="2"/><text x="48.0522%" y="127.50"></text></g><g><title>tmx_to_text`std::sys::pal::unix::fs::File::open_c (2 samples, 0.55%)</title><rect x="47.8022%" y="101" width="0.5495%" height="15" fill="rgb(242,107,0)" fg:x="174" fg:w="2"/><text x="48.0522%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`__open (2 samples, 0.55%)</title><rect x="47.8022%" y="85" width="0.5495%" height="15" fill="rgb(251,28,31)" fg:x="174" fg:w="2"/><text x="48.0522%" y="95.50"></text></g><g><title>tmx_to_text`quick_xml::events::BytesStart::attributes (2 samples, 0.55%)</title><rect x="48.3516%" y="117" width="0.5495%" height="15" fill="rgb(233,223,10)" fg:x="176" fg:w="2"/><text x="48.6016%" y="127.50"></text></g><g><title>tmx_to_text`quick_xml::events::BytesStart::try_get_attribute (7 samples, 1.92%)</title><rect x="48.3516%" y="133" width="1.9231%" height="15" fill="rgb(215,21,27)" fg:x="176" fg:w="7"/><text x="48.6016%" y="143.50">t..</text></g><g><title>tmx_to_text`quick_xml::events::attributes::IterState::next (5 samples, 1.37%)</title><rect x="48.9011%" y="117" width="1.3736%" height="15" fill="rgb(232,23,21)" fg:x="178" fg:w="5"/><text x="49.1511%" y="127.50"></text></g><g><title>tmx_to_text`quick_xml::events::attributes::IterState::check_for_duplicates (1 samples, 0.27%)</title><rect x="50.0000%" y="101" width="0.2747%" height="15" fill="rgb(244,5,23)" fg:x="182" fg:w="1"/><text x="50.2500%" y="111.50"></text></g><g><title>tmx_to_text`quick_xml::encoding::Decoder::decode_cow (49 samples, 13.46%)</title><rect x="50.8242%" y="117" width="13.4615%" height="15" fill="rgb(226,81,46)" fg:x="185" fg:w="49"/><text x="51.0742%" y="127.50">tmx_to_text`quick_xm..</text></g><g><title>tmx_to_text`core::str::converts::from_utf8 (48 samples, 13.19%)</title><rect x="51.0989%" y="101" width="13.1868%" height="15" fill="rgb(247,70,30)" fg:x="186" fg:w="48"/><text x="51.3489%" y="111.50">tmx_to_text`core::st..</text></g><g><title>libsystem_malloc.dylib`0x7ff813ededcf (1 samples, 0.27%)</title><rect x="65.3846%" y="101" width="0.2747%" height="15" fill="rgb(212,68,19)" fg:x="238" fg:w="1"/><text x="65.6346%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1 samples, 0.27%)</title><rect x="65.6593%" y="101" width="0.2747%" height="15" fill="rgb(240,187,13)" fg:x="239" fg:w="1"/><text x="65.9093%" y="111.50"></text></g><g><title>tmx_to_text`quick_xml::events::BytesText::unescape (62 samples, 17.03%)</title><rect x="50.2747%" y="133" width="17.0330%" height="15" fill="rgb(223,113,26)" fg:x="183" fg:w="62"/><text x="50.5247%" y="143.50">tmx_to_text`quick_xml::eve..</text></g><g><title>tmx_to_text`quick_xml::escape::unescape_with (11 samples, 3.02%)</title><rect x="64.2857%" y="117" width="3.0220%" height="15" fill="rgb(206,192,2)" fg:x="234" fg:w="11"/><text x="64.5357%" y="127.50">tmx..</text></g><g><title>tmx_to_text`memchr::arch::x86_64::memchr::memchr2_raw::find_avx2 (5 samples, 1.37%)</title><rect x="65.9341%" y="101" width="1.3736%" height="15" fill="rgb(241,108,4)" fg:x="240" fg:w="5"/><text x="66.1841%" y="111.50"></text></g><g><title>tmx_to_text`memchr::arch::x86_64::avx2::memchr::Two::find_raw (3 samples, 0.82%)</title><rect x="66.4835%" y="85" width="0.8242%" height="15" fill="rgb(247,173,49)" fg:x="242" fg:w="3"/><text x="66.7335%" y="95.50"></text></g><g><title>tmx_to_text`memchr::arch::x86_64::avx2::memchr::Two::find_raw_avx2 (3 samples, 0.82%)</title><rect x="66.4835%" y="69" width="0.8242%" height="15" fill="rgb(224,114,35)" fg:x="242" fg:w="3"/><text x="66.7335%" y="79.50"></text></g><g><title>tmx_to_text`quick_xml::encoding::Decoder::decode_cow (4 samples, 1.10%)</title><rect x="67.3077%" y="101" width="1.0989%" height="15" fill="rgb(245,159,27)" fg:x="245" fg:w="4"/><text x="67.5577%" y="111.50"></text></g><g><title>tmx_to_text`core::str::converts::from_utf8 (2 samples, 0.55%)</title><rect x="67.8571%" y="85" width="0.5495%" height="15" fill="rgb(245,172,44)" fg:x="247" fg:w="2"/><text x="68.1071%" y="95.50"></text></g><g><title>tmx_to_text`quick_xml::events::attributes::Attribute::unescape_value (5 samples, 1.37%)</title><rect x="67.3077%" y="133" width="1.3736%" height="15" fill="rgb(236,23,11)" fg:x="245" fg:w="5"/><text x="67.5577%" y="143.50"></text></g><g><title>tmx_to_text`quick_xml::events::attributes::Attribute::decode_and_unescape_value_with (5 samples, 1.37%)</title><rect x="67.3077%" y="117" width="1.3736%" height="15" fill="rgb(205,117,38)" fg:x="245" fg:w="5"/><text x="67.5577%" y="127.50"></text></g><g><title>tmx_to_text`quick_xml::escape::unescape_with (1 samples, 0.27%)</title><rect x="68.4066%" y="101" width="0.2747%" height="15" fill="rgb(237,72,25)" fg:x="249" fg:w="1"/><text x="68.6566%" y="111.50"></text></g><g><title>tmx_to_text`memchr::arch::x86_64::memchr::memchr2_raw::find_avx2 (1 samples, 0.27%)</title><rect x="68.4066%" y="85" width="0.2747%" height="15" fill="rgb(244,70,9)" fg:x="249" fg:w="1"/><text x="68.6566%" y="95.50"></text></g><g><title>tmx_to_text`memchr::arch::x86_64::avx2::memchr::Two::find_raw (1 samples, 0.27%)</title><rect x="68.4066%" y="69" width="0.2747%" height="15" fill="rgb(217,125,39)" fg:x="249" fg:w="1"/><text x="68.6566%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`read (13 samples, 3.57%)</title><rect x="77.7473%" y="117" width="3.5714%" height="15" fill="rgb(235,36,10)" fg:x="283" fg:w="13"/><text x="77.9973%" y="127.50">libs..</text></g><g><title>libsystem_platform.dylib`_platform_memcmp$VARIANT$Base (2 samples, 0.55%)</title><rect x="81.3187%" y="117" width="0.5495%" height="15" fill="rgb(251,123,47)" fg:x="296" fg:w="2"/><text x="81.5687%" y="127.50"></text></g><g><title>tmx_to_text`alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (2 samples, 0.55%)</title><rect x="81.8681%" y="117" width="0.5495%" height="15" fill="rgb(221,13,13)" fg:x="298" fg:w="2"/><text x="82.1181%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (2 samples, 0.55%)</title><rect x="81.8681%" y="101" width="0.5495%" height="15" fill="rgb(238,131,9)" fg:x="298" fg:w="2"/><text x="82.1181%" y="111.50"></text></g><g><title>tmx_to_text`memchr::arch::x86_64::avx2::memchr::One::find_raw (3 samples, 0.82%)</title><rect x="82.6923%" y="101" width="0.8242%" height="15" fill="rgb(211,50,8)" fg:x="301" fg:w="3"/><text x="82.9423%" y="111.50"></text></g><g><title>tmx_to_text`memchr::arch::x86_64::avx2::memchr::One::find_raw_avx2 (3 samples, 0.82%)</title><rect x="82.6923%" y="85" width="0.8242%" height="15" fill="rgb(245,182,24)" fg:x="301" fg:w="3"/><text x="82.9423%" y="95.50"></text></g><g><title>tmx_to_text`memchr::arch::x86_64::memchr::memchr_raw::find_avx2 (8 samples, 2.20%)</title><rect x="82.4176%" y="117" width="2.1978%" height="15" fill="rgb(242,14,37)" fg:x="300" fg:w="8"/><text x="82.6676%" y="127.50">t..</text></g><g><title>tmx_to_text`memchr::arch::x86_64::avx2::memchr::One::find_raw_avx2 (4 samples, 1.10%)</title><rect x="83.5165%" y="101" width="1.0989%" height="15" fill="rgb(246,228,12)" fg:x="304" fg:w="4"/><text x="83.7665%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`read (4 samples, 1.10%)</title><rect x="90.1099%" y="101" width="1.0989%" height="15" fill="rgb(213,55,15)" fg:x="328" fg:w="4"/><text x="90.3599%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (3 samples, 0.82%)</title><rect x="91.2088%" y="101" width="0.8242%" height="15" fill="rgb(209,9,3)" fg:x="332" fg:w="3"/><text x="91.4588%" y="111.50"></text></g><g><title>tmx_to_text`memchr::arch::x86_64::avx2::memchr::Three::find_raw (1 samples, 0.27%)</title><rect x="93.1319%" y="85" width="0.2747%" height="15" fill="rgb(230,59,30)" fg:x="339" fg:w="1"/><text x="93.3819%" y="95.50"></text></g><g><title>tmx_to_text`quick_xml::reader::buffered_reader::_&lt;impl quick_xml::reader::XmlSource&lt;&amp;mut alloc::vec::Vec&lt;u8&gt;&gt; for R&gt;::read_with (40 samples, 10.99%)</title><rect x="84.6154%" y="117" width="10.9890%" height="15" fill="rgb(209,121,21)" fg:x="308" fg:w="40"/><text x="84.8654%" y="127.50">tmx_to_text`quic..</text></g><g><title>tmx_to_text`memchr::arch::x86_64::memchr::memchr3_raw::find_avx2 (13 samples, 3.57%)</title><rect x="92.0330%" y="101" width="3.5714%" height="15" fill="rgb(220,109,13)" fg:x="335" fg:w="13"/><text x="92.2830%" y="111.50">tmx_..</text></g><g><title>tmx_to_text`memchr::arch::x86_64::avx2::memchr::Three::find_raw_avx2 (8 samples, 2.20%)</title><rect x="93.4066%" y="85" width="2.1978%" height="15" fill="rgb(232,18,1)" fg:x="340" fg:w="8"/><text x="93.6566%" y="95.50">t..</text></g><g><title>tmx_to_text`quick_xml::reader::state::ReaderState::emit_end (6 samples, 1.65%)</title><rect x="95.6044%" y="117" width="1.6484%" height="15" fill="rgb(215,41,42)" fg:x="348" fg:w="6"/><text x="95.8544%" y="127.50"></text></g><g><title>tmx_to_text`quick_xml::reader::Reader&lt;R&gt;::read_event_impl (111 samples, 30.49%)</title><rect x="68.6813%" y="133" width="30.4945%" height="15" fill="rgb(224,123,36)" fg:x="250" fg:w="111"/><text x="68.9313%" y="143.50">tmx_to_text`quick_xml::reader::Reader&lt;R&gt;::read_ev..</text></g><g><title>tmx_to_text`quick_xml::reader::state::ReaderState::emit_start (7 samples, 1.92%)</title><rect x="97.2527%" y="117" width="1.9231%" height="15" fill="rgb(240,125,3)" fg:x="354" fg:w="7"/><text x="97.5027%" y="127.50">t..</text></g><g><title>dyld`start (362 samples, 99.45%)</title><rect x="0.0000%" y="229" width="99.4505%" height="15" fill="rgb(205,98,50)" fg:x="0" fg:w="362"/><text x="0.2500%" y="239.50">dyld`start</text></g><g><title>tmx_to_text`main (361 samples, 99.18%)</title><rect x="0.2747%" y="213" width="99.1758%" height="15" fill="rgb(205,185,37)" fg:x="1" fg:w="361"/><text x="0.5247%" y="223.50">tmx_to_text`main</text></g><g><title>tmx_to_text`std::rt::lang_start_internal (361 samples, 99.18%)</title><rect x="0.2747%" y="197" width="99.1758%" height="15" fill="rgb(238,207,15)" fg:x="1" fg:w="361"/><text x="0.5247%" y="207.50">tmx_to_text`std::rt::lang_start_internal</text></g><g><title>tmx_to_text`std::rt::lang_start::_{{closure}} (361 samples, 99.18%)</title><rect x="0.2747%" y="181" width="99.1758%" height="15" fill="rgb(213,199,42)" fg:x="1" fg:w="361"/><text x="0.5247%" y="191.50">tmx_to_text`std::rt::lang_start::_{{closure}}</text></g><g><title>tmx_to_text`std::sys_common::backtrace::__rust_begin_short_backtrace (361 samples, 99.18%)</title><rect x="0.2747%" y="165" width="99.1758%" height="15" fill="rgb(235,201,11)" fg:x="1" fg:w="361"/><text x="0.5247%" y="175.50">tmx_to_text`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>tmx_to_text`tmx_to_text::main (353 samples, 96.98%)</title><rect x="2.4725%" y="149" width="96.9780%" height="15" fill="rgb(207,46,11)" fg:x="9" fg:w="353"/><text x="2.7225%" y="159.50">tmx_to_text`tmx_to_text::main</text></g><g><title>tmx_to_text`quick_xml::reader::state::ReaderState::emit_text (1 samples, 0.27%)</title><rect x="99.1758%" y="133" width="0.2747%" height="15" fill="rgb(241,35,35)" fg:x="361" fg:w="1"/><text x="99.4258%" y="143.50"></text></g><g><title>all (364 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(243,32,47)" fg:x="0" fg:w="364"/><text x="0.2500%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`__exit (2 samples, 0.55%)</title><rect x="99.4505%" y="229" width="0.5495%" height="15" fill="rgb(247,202,23)" fg:x="362" fg:w="2"/><text x="99.7005%" y="239.50"></text></g></svg></svg>